components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user
        
    School:
      type: object
      properties:
        Schoolid:
          type: integer
          format: int32
          description: The unique ID of the school
        School_Name:
          type: string
          description: The name of the school
        medium:
          type: string
          description: The medium of instruction
        Latitude:
          type: string
          description: The latitude of the school's location
        Longitude:
          type: string
          description: The longitude of the school's location
        shift:
          type: string
          description: The school's shift (if applicable)
        low_class:
          type: string
          description: The lowest class offered by the school
        High_class:
          type: string
          description: The highest class offered by the school
        Z_ID:
          type: integer
          format: int32
          description: The zone ID of the school
        Zone_Name:
          type: string
          description: The name of the school's zone
        D_ID:
          type: integer
          format: int32
          description: The district ID of the school
        District_name:
          type: string
          description: The name of the district where the school is located
        SchManagement:
          type: string
          description: The school's management type
        SchCategory:
          type: string
          description: The school's category
      required:
        - Schoolid
        - School_Name
        - medium

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
